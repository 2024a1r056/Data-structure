//Binary search tree using linked list (Experiment 16)( 1 may)
#include <stdio.h>
#include <stdlib.h>
struct TreeNode{
    struct TreeNode* left;
    int data;
    struct TreeNode* right;
};
struct TreeNode* createNode(int value){
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->data = value;
    node->left = node->right=NULL;
    return node;
}
struct TreeNode* insert(struct TreeNode* root , int value){
    if(root == NULL)
        return createNode(value);
    else if(value<root->data)
        root->left = insert(root->left, value);
    else if(value > root->data  )
        root->right = insert(root->right, value);
        return root;
}
void preorder(struct TreeNode* root){
    if(root==NULL)
    return;
    printf("%d ",root->data);
    preorder(root->left);
    preorder(root->right);
}
void inorder(struct TreeNode* root){
    if(root==NULL)
    return;
   inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
}
void postorder(struct TreeNode* root){
    if(root==NULL)
    return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ",root->data);
}  

struct TreeNode* search(struct TreeNode* root, int value){// preorder traversing for searchinf 
    if(root==NULL)
        return NULL;
    else if(value == root->data)
        return root;
    else if(value<root->data)
        return search(root->left, value);
    else
        return search(root->right, value);
}
struct TreeNode* findMin(struct TreeNode* root){
    while(root->left != NULL){
        root= root->left;
    }
    return root;
}

struct TreeNode* delete(struct TreeNode* root, int value){
    if(root==NULL)
        return NULL;
    else if( value<root->data){
        root->left = delete(root->left, value);
        return root;
    }
    else if( value>root->data){
        root->right = delete(root->right, value);
        return root;
    }
    else{// when element found 
        if(root->left == NULL && root->right ==NULL){// Zero child
            free(root);
            return NULL;
        }
        else if(root->right == NULL){// left child
            struct TreeNode* temp = root->left;
            free(root);
            return temp;
        }
        else if(root->left == NULL){// right child
            struct TreeNode* temp = root->right;
            free(root);
            return temp;
        }
        else {
            struct TreeNode* temp = findMin(root->right);
            root->data= temp->data;  
            delete(root->right, temp->data);
        }
    }
}
int main(){
    int choice, val;
    struct TreeNode* root = NULL;
    while(1){
        printf("1.Insert\n"); 
        printf("2.Preorder\n");
        printf("3.Inorder\n");
        printf("4.Postorder\n");
        printf("5.Search\n");
        printf("6.Delete\n");
        printf("7.Exit\n");
        
        printf("Enter your choice: ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
                printf("Enter Value: ");
                scanf("%d",&val);
                root = insert(root, val);
                break;
            case 2:
                printf("Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 3:
                printf("Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 4:
                printf("Postorder Traversal: ");
                postorder(root);
                printf("\n");
                break;
            case 5:
            printf("Enter Value: ");
            scanf("%d",&val);
            if(search(root, val)==NULL)
            printf("Element Not found !!!\n");
            else 
            printf("Element found !!\n");
                
                break;
            case 6:
            printf("Enter Value: ");
            scanf("%d",&val);
            if(delete(root, val)==NULL)
            printf("Element Not deleted !!!\n");
            else 
            printf("Element deleted !!\n");
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid cjoice !!!\n");
        }
        printf("\n");
    }
    return 0;
}
