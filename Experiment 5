#include<stdio.h>
#include<string.h>
#include<malloc.h>
#include<ctype.h>
#include<stdlib.h>
int precedence(char op){
    switch(op){
        case'+':
        case'-':
            return 1;
            case'*':
            case'/':
            return 2;
            case'^':
            return 3;
            default:
            return -1;
    }
}
char* convertInfixToPrefix(char *exp){
    int size = strlen(exp),top=-1,index=0;
    char operator[size];
    char* str =(char*)malloc(size+1);
    for(int i =size-1; i>=0;i--){
        char ch = exp[i];
        if(isdigit(ch)||isalpha(ch))
        str[index++]=ch;
        else if(ch =='+' || ch =='-' ||ch =='*' ||ch =='/' ||ch =='^' ){
            if(top==-1)
            operator[++top]=ch;
            else{
                while(top!=-1 && precedence(ch)<= precedence(operator[top]) ){
                    str[index++]=operator[top--];
                }
                operator[++top]=ch;
            }

        }
        else if(ch==')')
        operator[++top]=ch;
        else if(ch =='('){
            while(operator[top]!=')'){
                str[index++]=operator[top--];
            }
            top--;


        }
    }
    while(top!=-1){
        str[index++] =operator[top--];
    }
    str[index]='\0';
    return strrev(str);
}

char* convertInfixToPostfix(char *exp){
    int size = strlen(exp),top=-1,index=0;
    char operator[size];
    char* str =(char*)malloc(size+1);
    for(int i =0; i<size;i++){
        char ch = exp[i];
        if(isdigit(ch)||isalpha(ch))
        str[index++]=ch;
        else if(ch =='+' || ch =='-' ||ch =='*' ||ch =='/' ||ch =='^' ){
            if(top==-1)
            operator[++top]=ch;
            else{
                while(top!=-1 && precedence(ch)<= precedence(operator[top]) ){
                    str[index++]=operator[top--];
                }
                operator[++top]=ch;
            }

        }
        else if(ch=='(')
        operator[++top]=ch;
        else if(ch ==')'){
            while(operator[top]!='('){
                str[index++]=operator[top--];
            }
            top--;


        }
    }
    while(top!=-1){
        str[index++] =operator[top--];
    }
    str[index]='\0';
    return str;
}
char* convertPostfixToInfixExpression(char* exp){
    int size = strlen(exp),top = -1;
    char stack[size][100];
    for(int i =0; i<size;i++){
        char ch = exp[i];
        if(isalnum(ch)){
            char temp[]={ch,'\0'};

            strcpy(stack[++top],temp);
        }
        else if(ch=='+'|| ch == '-'|| ch == '/'|| ch == '*'|| ch =='^'){
            char *s1= stack[top--];
            char *s2= stack[top--];
            char s3[100];
            snprintf(s3 , 100 ,"(%s%c%s)", s2, ch, s1);
            strcpy(stack[++top],s3);
        }
    }
    char *s = stack[top];
    return s;
}
char* convertPrefixToInfixExpression(char* exp){
    int size = strlen(exp),top = -1;
    char stack[size][100];
    for(int i =size -1; i>=0;i--){
        char ch = exp[i];
        if(isalnum(ch)){
            char temp[]={ch,'\0'};

            strcpy(stack[++top],temp);
        }
        else if(ch=='+'|| ch == '-'|| ch == '/'|| ch == '*'|| ch =='^'){
            char *s1= stack[top--];
            char *s2= stack[top--];
            char s3[100];
            snprintf(s3 , 100 ,"(%s%c%s)", s1, ch, s2);
            strcpy(stack[++top],s3);
        }
    }
    char *s = stack[top];
    return s;
}
int main(){
    char exp[100];
    printf("Enter the infix expression :");
    gets(exp);
    printf("Prefix form of Infix expression %s is %s\n" ,exp, convertInfixToPrefix(exp));
    printf("Postfix form of Infix expression %s is %s\n" ,exp, convertInfixToPostfix(exp));
    printf("enter Postfix Expression : ");
    gets(exp);
    printf("Infix form of post fix expression : %s\n",convertPostfixToInfixExpression(exp));
    printf("enter Prefix Expression : ");
    gets(exp);
    printf("Infix form of pre fix expression : %s",convertPrefixToInfixExpression(exp));

    return 0 ;
}
