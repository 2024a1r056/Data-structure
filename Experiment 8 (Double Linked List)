// Double linked list EXperiment 8 (7 april )

#include<stdio.h>
#include<stdlib.h>
struct Node{
    struct Node *prev;
    int data;
    struct Node *next;
};
struct Node* head = NULL;
struct Node* createnewNode(int ele){
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data =  ele;
    newNode->next = newNode->prev = NULL;
    return newNode;
}

void insertNodeInBeg(int ele){
    struct Node* newNode = createnewNode(ele);
    if(head==NULL){
        head = newNode;
    }
    else{
        newNode->next = head ;
        head->prev = newNode;
        head = newNode;
    }
    printf("Node Inserted\n");
}
void insertNodeAtEnd(int ele){
    struct Node* newNode = createnewNode(ele);
    if(head ==NULL){
        head = newNode;
    }
    else{
        struct Node* temp = head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=newNode;
        newNode->prev=temp;
    }
        printf("Node is inserted !!!\n");
}

void insertAtAnyPos(int ele, int pos){
    if(head == NULL){
        printf("lsit is empty!!1\n");
    }
   else if(pos ==1){
        insertNodeInBeg(ele); 
    }
    else{
        struct Node* newNode = createnewNode(ele);
        struct Node* temp = head;
        int i = 1;
        while(i!= pos && temp != NULL){
            i ++;
            temp = temp->next;
        }
        if(temp !=NULL){
            newNode->prev = temp->prev;
            temp ->prev->next = temp ;
            newNode->next = temp;
            temp-> next = newNode;
        }
        else
        printf("Invalid position !!!!!\n");
    }
}
void deleteNodefromBeg(){
    if(head ==NULL){
        printf("List is empty!!!\n");

    }
    else{
        struct Node* temp = head;
        head = head->next;
        head->prev= NULL;
        free(temp);
        printf("Node is deleted!!!!\n");
    }
}

void deleteNodefromEnd(){
    if(head ==NULL){
        printf("List is empty!!!\n");

    }
    else{
        struct Node* temp = head;
        while(temp->next!=NULL){
            temp = temp->next;
     
    }
    struct Node* t =temp;
    if(temp->prev!=NULL)
    temp->prev->next = NULL;
    else 
    head =NULL;
    free(t);
    printf("Node is deleted!!!!\n");
    }
}
void deleteNodefromanyPos(int pos){
    if(head==NULL){
        printf("List is empty!!!\n");
    }
    else if(pos==1)
    deleteNodefromBeg();
    else{
        int i =1;
        struct Node* temp = head;
        while(i!=pos && temp!= NULL){
            i++;
            temp = temp->next;
        
        }
        if(temp!= NULL){
            temp->prev->next= temp->next;
            if(temp->next!=NULL)
            temp->next->prev = temp->prev;
            free(temp);
            printf("Node Deleted!!!\n");
        }
        else
        printf("Invalid Position !!!\n");
    }
        
    }

void search(int target){
    if(head==NULL)
    printf("List is empty!!!\n");
    else{
        struct Node*temp = head;
        while(temp!=NULL){
            if(temp->data==target){
                printf("Element found");
                return;
            }
            temp = temp->next;
        }
        printf("Elements Not Found!!!\n");
    }
}
void display(){
    if(head == NULL)
    printf("List is empty!!!\n");
    else{
       struct Node* temp = head;
        while(temp!=NULL){
            printf(" %d",temp->data);
            temp= temp->next;
            
        }

    }
}
int main(){
    while(1){
        printf("------Doubly Linked List ------\n");
        printf("1. Insertion Node In Begining\n");
        printf("2. Insertion Node At End\n");
        printf("3. Insertion Node At any Position\n");
        printf("4. Delete node from Begining\n");
        printf("5. Delete node from End\n");
        printf("6. Delete node from Any Position\n");
        printf("7. Search Element \n");
       
        printf("8.Display list\n");
        printf("9.Exit\n");
        int choice, value, pos;
        printf("Enter choice : ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
                printf("Enter value :");
                scanf("%d",&value);
                insertNodeInBeg(value);  
                break;
            case 2:
            printf("Enter value :");
                scanf("%d",&value);
                insertNodeAtEnd(value);
                break;
            case 3:
            printf("Enter the value : ");
            scanf("%d",&value);
            printf("Enter the position : ");
            scanf("%d",&pos);
            insertAtAnyPos(value, pos);
            
                break;
            case 4: 
            deleteNodefromBeg();
                break;
             case 5:
             deleteNodefromEnd();
                break;
           case 6:
           printf("Enter the position :");
           scanf("%d",&pos);
           deleteNodefromanyPos(pos);
                break;
            case 7:
            printf("Enter the search element: ");
            scanf("%d",&value);
            search(value);
                break;
            
            case 8:
            display();
                break;
            case 9 :
                exit(0);
            default :
                printf("Invalid choice !!!\n ");


        }
        printf("\n");


    }
    return 0;
}
